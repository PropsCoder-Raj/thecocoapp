{"version":3,"file":"static/js/397.9b010b57.chunk.js","mappings":"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","sources":["config/APICongig.js","views/auth/resetPin/ResetPin.js"],"sourcesContent":["\r\n//Live URL\r\nconst url = \"http://thecocoapp.com:8080/api/v1/\";\r\n\r\n//Local URL\r\n// const url = \"http://localhost:3500/api/v1/\";\r\n\r\nconst ApiConfig = {\r\n  loginGenerateOtp: `${url}auth/login/email-with-pin`,\r\n  loginVerifyOtp: `${url}auth/login/verify-otp`,\r\n\r\n  signupGenerateOtp: `${url}auth/signup/generate-otp`,\r\n  signupVerifiedEmail: `${url}auth/signup-with-verfied-email-pin`,\r\n  signupVerifyOtp: `${url}auth/signup/verify-otp`,\r\n\r\n  setPin: `${url}auth/send-otp-for-set-pin`,\r\n  setPinChange: `${url}auth/verify-otp-for-pin-change`,\r\n  resetPin: `${url}auth/reset-pin-password`,\r\n  \r\n\r\n  createChild: `${url}child/create`,\r\n  getSchool: `${url}school/get-all-schools`,\r\n\r\n  //child\r\n  getAllChild: `${url}child/get-all-childs`,\r\n  switchChild: `${url}child/switch-to-active-child`,\r\n  //modules\r\n  allModules : `${url}dashboard/get-all-modules`,\r\n  //leason\r\n  getLeason: `${url}dashboard/get-lessons`,\r\n  //questions\r\n  getQuestions: `${url}dashboard/get-questions`,\r\n  attemptQuestions: `${url}questions/attempt-questions`,\r\n  \r\n};\r\nexport default ApiConfig;\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    FormHelperText,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Page from \"src/component/Page\";\r\nimport ApiConfig from \"src/config/APICongig\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\r\nimport toast from 'react-hot-toast';\r\nimport { AuthContext } from \"src/context/Auth\";\r\nimport moment from \"moment\";\r\nimport OTPInput from \"otp-input-react\";\r\n\r\n\r\n\r\nconst styles = {\r\n    otpFormControl: {\r\n        \"& input\": {\r\n            color: \"#0B1426\",\r\n            width: \"48px !important\",\r\n            height: \"48px !important\",\r\n            marginRight: \"10px !important\",\r\n            border: \"1px solid #D8D8D8\",\r\n            borderRadius: \"8px\",\r\n            \"@media(max-width:460px)\": {\r\n                width: \"45px !important\",\r\n                height: \"45px !important\",\r\n                marginRight: \"7px !important\",\r\n            },\r\n        },\r\n    },\r\n};\r\nfunction ResetPin(props) {\r\n    // const [isRememberMe, setIsRememberMe] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n    const auth = useContext(AuthContext);\r\n    const formInitialSchema =\r\n        localStorage.getItem(\"emailReset\")?\r\n    {\r\n                otp: \"\"\r\n    }:{\r\n        email: \"\",\r\n    }\r\n   \r\n    const handleFormSubmit = async (values) => {\r\n        setIsLoading(true);\r\n        const url = localStorage.getItem(\"emailReset\") ? ApiConfig.setPinChange : ApiConfig.setPin\r\n        const sendData = localStorage.getItem(\"emailReset\") ? {\r\n            email: localStorage.getItem(\"emailReset\"),\r\n            otp: values.otp,} : {\r\n            email: values.email,}\r\n        try {\r\n            const res = await axios.post(url, sendData);\r\n            if (res.status === 200) {\r\n                if (localStorage.getItem(\"emailReset\")){\r\n                    navigate(\"/reset-pin-set\",{\r\n                    state:{\r\n                            token:res.data.token\r\n                    }\r\n                });\r\n                    auth.setEndTime(moment().add(0, \"m\").unix());\r\n                    localStorage.removeItem(\"emailReset\")\r\n                }else{\r\n                    localStorage.setItem(\"emailReset\", values.email);\r\n                    auth.setEndTime(moment().add(3, \"m\").unix());\r\n                }\r\n                toast.success(res.data.message);\r\n                setIsLoading(false);\r\n                \r\n            }\r\n        } catch (error) {\r\n            toast.error(\r\n                error?.response?.data?.message ||\r\n                \"Something went wrong please try again later\"\r\n            );\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    const reSendOTPHandle = async () => {\r\n        const url = ApiConfig.setPin;\r\n        try {\r\n            const res = await axios.post(url, {\r\n                email: localStorage.getItem(\"emailReset\"),\r\n            });\r\n\r\n            if (res.status === 200) {\r\n                toast.success(res.data.message);\r\n                setIsLoading(false);\r\n                auth.setEndTime(moment().add(3, \"m\").unix());\r\n            }\r\n        } catch (error) {\r\n            toast.error(\r\n                error?.response?.data?.message ||\r\n                \"Something went wrong please try again later\"\r\n            );\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    return (\r\n        <Page title=\"ResetPin\">\r\n            <Box sx={{ display: \"grid\", gap: \"13px\", textAlign: \"center\" }}>\r\n                <Typography variant=\"h1\" color={\"rgba(67, 69, 71, 1)\"} mt={1}>\r\n                    Reset PIN\r\n                </Typography>\r\n                <Typography variant=\"h4\" color={\"rgba(67, 69, 71, 1)\"}>\r\n                    Forgot your PIN? \r\n                    <br />Reset it now to restore your access.\r\n                </Typography>\r\n                <Formik\r\n                    onSubmit={handleFormSubmit}\r\n                    initialValues={formInitialSchema}\r\n                    validationSchema={yup.object().shape( localStorage.getItem(\"emailReset\") ?\r\n                    {\r\n                            otp: yup\r\n                                .string()\r\n                                .length(4, \"OTP must be 4 digits\")\r\n                                .required(\"Please enter your OTP.\"), } : \r\n                        \r\n                    {    email: yup.string().required(\"Please enter your email address.\"),\r\n                        \r\n                    })}\r\n                >\r\n                    {({\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        touched,\r\n                        values,\r\n                        setFieldValue\r\n                    }) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Grid sx={{ margin: \"13px 0\" }}>\r\n                                <TextField\r\n                                    disabled={localStorage.getItem(\"emailReset\")}\r\n                                    placeholder=\"Email ID\"\r\n                                    type=\"email\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    inputProps={{ maxLength: 256 }}\r\n                                    value={values.email}\r\n                                    name=\"email\"\r\n                                    error={Boolean(touched.email && errors.email)}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    SX={{ padding: \"8px 13px\" }}\r\n                                />\r\n                                <FormHelperText error>\r\n                                    {touched.email && errors.email}\r\n                                </FormHelperText>\r\n                            </Grid>\r\n                            {localStorage.getItem(\"emailReset\")  ? \r\n                            <Grid sx={{ margin: \"13px 0\", textAlign: \"start\" }}>\r\n                                <Box >\r\n                                    <Typography variant=\"body1\" color={\"rgba(67, 69, 71, 1)\"} sx={{ marginBottom: \"13px\" }}>\r\n                                        Enter your 4-digit otp\r\n                                    </Typography>\r\n                                    <FormControl\r\n                                        fullWidth\r\n                                        error={Boolean(touched.pin && errors.pin)}\r\n                                        sx={styles.otpFormControl}\r\n                                    >\r\n                                        <OTPInput\r\n                                            value={values.otp}\r\n                                            inputVariant=\"standard\"\r\n                                            autoComplete=\"off\"\r\n                                            onChange={(otpValue) => {\r\n                                                setFieldValue(\"otp\", otpValue);\r\n                                            }}\r\n                                            name=\"otp\"\r\n                                            id=\"inputID\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"start\",\r\n                                                width: \"100%\",\r\n                                                gap: \"15px\",\r\n                                            }}\r\n                                            OTPLength={4}\r\n                                            otpType=\"number\"\r\n                                        />\r\n                                    </FormControl>\r\n                                    {touched.otp && errors.otp && (\r\n                                        <FormHelperText error>{errors.otp}</FormHelperText>\r\n                                    )}\r\n                                </Box>\r\n                            </Grid>:\"\"\r\n                           }\r\n                            <Grid>\r\n                                <Box sx={{ marginTop: \"26px\" }}>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        disabled={isLoading}\r\n                                        fullWidth\r\n                                    >\r\n                                        Submit\r\n                                        {isLoading && <ButtonCircularProgress />}\r\n                                    </Button>\r\n                                </Box>\r\n                                <Box\r\n                                    sx={{\r\n                                        mt: \"13px\",\r\n                                    }}\r\n                                >\r\n                                    {auth.timeLeft?.minutes > 0 || auth.timeLeft?.seconds > 0 ? (\r\n                                        <Typography\r\n                                            variant=\"h3\"\r\n                                            style={{\r\n                                                color: \"rgba(60, 60, 60, 1)\",\r\n                                                fontSize: \"18px\",\r\n                                                fontStyle: \"normal\",\r\n                                                fontWeight: \"500\",\r\n                                                lineHeight: \"24px\",\r\n                                            }}\r\n                                        >\r\n                                            Resend OTP in\r\n                                            &nbsp;\r\n                                            {auth.timeLeft?.minutes?.toString().padStart(2, \"0\")}:\r\n                                            {auth.timeLeft?.seconds?.toString().padStart(2, \"0\")}\r\n                                            &nbsp;s\r\n                                        </Typography>\r\n                                    ) : (\r\n                                        <Box\r\n                                            sx={{\r\n                                                display: \"grid\",\r\n                                                justifyContent: \"center\",\r\n                                                mt: \"13px\",\r\n                                            }}\r\n                                        >\r\n                                            <Typography variant=\"body1\" color={\"rgba(60, 60, 60, 1)\"}>\r\n                                                Didn’t get OTP?\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"rgba(0, 186, 242, 1)\",\r\n                                                        cursor: \"pointer\",\r\n                                                    }}\r\n                                                    onClick={reSendOTPHandle}\r\n                                                >\r\n                                                    &nbsp;Resend OTP\r\n                                                </span>\r\n                                            </Typography>\r\n                                        </Box>\r\n                                    )}\r\n                                </Box>\r\n                                <Box\r\n                                    sx={{\r\n                                        display: \"grid\",\r\n                                        justifyContent: \"center\",\r\n                                        mt: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    <Typography variant=\"body1\" color={\"rgba(60, 60, 60, 1)\"}>\r\n                                        Have an account?\r\n                                        <span\r\n                                            onClick={() => {\r\n                                                navigate(\"/login\");\r\n                                            }}\r\n                                            style={{\r\n                                                color: \"rgba(0, 186, 242, 1)\",\r\n                                                cursor: \"pointer\",\r\n                                            }}\r\n                                        >\r\n                                            &nbsp;Log In\r\n                                        </span>\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </Page>\r\n    );\r\n}\r\n\r\nexport default ResetPin;\r\n"],"names":["url","loginGenerateOtp","concat","loginVerifyOtp","signupGenerateOtp","signupVerifiedEmail","signupVerifyOtp","setPin","setPinChange","resetPin","createChild","getSchool","getAllChild","switchChild","allModules","getLeason","getQuestions","attemptQuestions","styles","otpFormControl","color","width","height","marginRight","border","borderRadius","props","isLoading","setIsLoading","useState","navigate","useNavigate","auth","useContext","AuthContext","formInitialSchema","localStorage","getItem","otp","email","reSendOTPHandle","async","ApiConfig","res","axios","post","status","toast","success","data","message","setEndTime","moment","add","unix","error","_error$response2","_error$response2$data","response","_jsx","Page","title","children","_jsxs","Box","sx","display","gap","textAlign","Typography","variant","mt","Formik","onSubmit","sendData","values","state","token","removeItem","setItem","_error$response","_error$response$data","initialValues","validationSchema","yup","shape","length","required","_ref","_auth$timeLeft","_auth$timeLeft2","_auth$timeLeft3","_auth$timeLeft3$minut","_auth$timeLeft4","_auth$timeLeft4$secon","errors","handleBlur","handleChange","handleSubmit","touched","setFieldValue","Form","Grid","margin","TextField","disabled","placeholder","type","fullWidth","size","inputProps","maxLength","value","name","Boolean","onBlur","onChange","SX","padding","FormHelperText","marginBottom","FormControl","pin","OTPInput","inputVariant","autoComplete","otpValue","id","style","justifyContent","OTPLength","otpType","marginTop","Button","ButtonCircularProgress","timeLeft","minutes","seconds","fontSize","fontStyle","fontWeight","lineHeight","toString","padStart","cursor","onClick"],"sourceRoot":""}