{"version":3,"file":"static/js/397.81a8ddfe.chunk.js","mappings":"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","sources":["views/auth/resetPin/ResetPin.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    FormHelperText,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Page from \"src/component/Page\";\r\nimport ApiConfig from \"src/config/APICongig\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\r\nimport toast from 'react-hot-toast';\r\nimport { AuthContext } from \"src/context/Auth\";\r\nimport moment from \"moment\";\r\nimport OTPInput from \"otp-input-react\";\r\n\r\n\r\n\r\nconst styles = {\r\n    otpFormControl: {\r\n        \"& input\": {\r\n            color: \"#0B1426\",\r\n            width: \"48px !important\",\r\n            height: \"48px !important\",\r\n            marginRight: \"10px !important\",\r\n            border: \"1px solid #D8D8D8\",\r\n            borderRadius: \"8px\",\r\n            \"@media(max-width:460px)\": {\r\n                width: \"45px !important\",\r\n                height: \"45px !important\",\r\n                marginRight: \"7px !important\",\r\n            },\r\n        },\r\n    },\r\n};\r\nfunction ResetPin(props) {\r\n    // const [isRememberMe, setIsRememberMe] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n    const auth = useContext(AuthContext);\r\n    const formInitialSchema =\r\n        localStorage.getItem(\"emailReset\")?\r\n    {\r\n                otp: \"\"\r\n    }:{\r\n        email: \"\",\r\n    }\r\n   \r\n    const handleFormSubmit = async (values) => {\r\n        setIsLoading(true);\r\n        const url = localStorage.getItem(\"emailReset\") ? ApiConfig.setPinChange : ApiConfig.setPin\r\n        const sendData = localStorage.getItem(\"emailReset\") ? {\r\n            email: localStorage.getItem(\"emailReset\"),\r\n            otp: values.otp,} : {\r\n            email: values.email,}\r\n        try {\r\n            const res = await axios.post(url, sendData);\r\n            if (res.status === 200) {\r\n                if (localStorage.getItem(\"emailReset\")){\r\n                    navigate(\"/reset-pin-set\",{\r\n                    state:{\r\n                            token:res.data.token\r\n                    }\r\n                });\r\n                    auth.setEndTime(moment().add(0, \"m\").unix());\r\n                    localStorage.removeItem(\"emailReset\")\r\n                }else{\r\n                    localStorage.setItem(\"emailReset\", values.email);\r\n                    auth.setEndTime(moment().add(3, \"m\").unix());\r\n                }\r\n                toast.success(res.data.message);\r\n                setIsLoading(false);\r\n                \r\n            }\r\n        } catch (error) {\r\n            toast.error(\r\n                error?.response?.data?.message ||\r\n                \"Something went wrong please try again later\"\r\n            );\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    const reSendOTPHandle = async () => {\r\n        const url = ApiConfig.setPin;\r\n        try {\r\n            const res = await axios.post(url, {\r\n                email: localStorage.getItem(\"emailReset\"),\r\n            });\r\n\r\n            if (res.status === 200) {\r\n                toast.success(res.data.message);\r\n                setIsLoading(false);\r\n                auth.setEndTime(moment().add(3, \"m\").unix());\r\n            }\r\n        } catch (error) {\r\n            toast.error(\r\n                error?.response?.data?.message ||\r\n                \"Something went wrong please try again later\"\r\n            );\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    return (\r\n        <Page title=\"ResetPin\">\r\n            <Box sx={{ display: \"grid\", gap: \"13px\", textAlign: \"center\" }}>\r\n                <Typography variant=\"h1\" color={\"rgba(67, 69, 71, 1)\"} mt={1}>\r\n                    Reset PIN\r\n                </Typography>\r\n                <Typography variant=\"h4\" color={\"rgba(67, 69, 71, 1)\"}>\r\n                    Forgot your PIN? \r\n                    <br />Reset it now to restore your access.\r\n                </Typography>\r\n                <Formik\r\n                    onSubmit={handleFormSubmit}\r\n                    initialValues={formInitialSchema}\r\n                    validationSchema={yup.object().shape( localStorage.getItem(\"emailReset\") ?\r\n                    {\r\n                            otp: yup\r\n                                .string()\r\n                                .length(4, \"OTP must be 4 digits\")\r\n                                .required(\"Please enter your OTP.\"), } : \r\n                        \r\n                    {    email: yup.string().required(\"Please enter your email address.\"),\r\n                        \r\n                    })}\r\n                >\r\n                    {({\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        touched,\r\n                        values,\r\n                        setFieldValue\r\n                    }) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Grid sx={{ margin: \"13px 0\" }}>\r\n                                <TextField\r\n                                    disabled={localStorage.getItem(\"emailReset\")}\r\n                                    placeholder=\"Email ID\"\r\n                                    type=\"email\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    inputProps={{ maxLength: 256 }}\r\n                                    value={values.email}\r\n                                    name=\"email\"\r\n                                    error={Boolean(touched.email && errors.email)}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    SX={{ padding: \"8px 13px\" }}\r\n                                />\r\n                                <FormHelperText error>\r\n                                    {touched.email && errors.email}\r\n                                </FormHelperText>\r\n                            </Grid>\r\n                            {localStorage.getItem(\"emailReset\")  ? \r\n                            <Grid sx={{ margin: \"13px 0\", textAlign: \"start\" }}>\r\n                                <Box >\r\n                                    <Typography variant=\"body1\" color={\"rgba(67, 69, 71, 1)\"} sx={{ marginBottom: \"13px\" }}>\r\n                                        Enter your 4-digit otp\r\n                                    </Typography>\r\n                                    <FormControl\r\n                                        fullWidth\r\n                                        error={Boolean(touched.pin && errors.pin)}\r\n                                        sx={styles.otpFormControl}\r\n                                    >\r\n                                        <OTPInput\r\n                                            value={values.otp}\r\n                                            inputVariant=\"standard\"\r\n                                            autoComplete=\"off\"\r\n                                            onChange={(otpValue) => {\r\n                                                setFieldValue(\"otp\", otpValue);\r\n                                            }}\r\n                                            name=\"otp\"\r\n                                            id=\"inputID\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"start\",\r\n                                                width: \"100%\",\r\n                                                gap: \"15px\",\r\n                                            }}\r\n                                            OTPLength={4}\r\n                                            otpType=\"number\"\r\n                                        />\r\n                                    </FormControl>\r\n                                    {touched.otp && errors.otp && (\r\n                                        <FormHelperText error>{errors.otp}</FormHelperText>\r\n                                    )}\r\n                                </Box>\r\n                            </Grid>:\"\"\r\n                           }\r\n                            <Grid>\r\n                                <Box sx={{ marginTop: \"26px\" }}>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        disabled={isLoading}\r\n                                        fullWidth\r\n                                    >\r\n                                        Submit\r\n                                        {isLoading && <ButtonCircularProgress />}\r\n                                    </Button>\r\n                                </Box>\r\n                                <Box\r\n                                    sx={{\r\n                                        mt: \"13px\",\r\n                                    }}\r\n                                >\r\n                                    {auth.timeLeft?.minutes > 0 || auth.timeLeft?.seconds > 0 ? (\r\n                                        <Typography\r\n                                            variant=\"h3\"\r\n                                            style={{\r\n                                                color: \"rgba(60, 60, 60, 1)\",\r\n                                                fontSize: \"18px\",\r\n                                                fontStyle: \"normal\",\r\n                                                fontWeight: \"500\",\r\n                                                lineHeight: \"24px\",\r\n                                            }}\r\n                                        >\r\n                                            Resend OTP in\r\n                                            &nbsp;\r\n                                            {auth.timeLeft?.minutes?.toString().padStart(2, \"0\")}:\r\n                                            {auth.timeLeft?.seconds?.toString().padStart(2, \"0\")}\r\n                                            &nbsp;s\r\n                                        </Typography>\r\n                                    ) : (\r\n                                        <Box\r\n                                            sx={{\r\n                                                display: \"grid\",\r\n                                                justifyContent: \"center\",\r\n                                                mt: \"13px\",\r\n                                            }}\r\n                                        >\r\n                                            <Typography variant=\"body1\" color={\"rgba(60, 60, 60, 1)\"}>\r\n                                                Didn’t get OTP?\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"rgba(0, 186, 242, 1)\",\r\n                                                        cursor: \"pointer\",\r\n                                                    }}\r\n                                                    onClick={reSendOTPHandle}\r\n                                                >\r\n                                                    &nbsp;Resend OTP\r\n                                                </span>\r\n                                            </Typography>\r\n                                        </Box>\r\n                                    )}\r\n                                </Box>\r\n                                <Box\r\n                                    sx={{\r\n                                        display: \"grid\",\r\n                                        justifyContent: \"center\",\r\n                                        mt: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    <Typography variant=\"body1\" color={\"rgba(60, 60, 60, 1)\"}>\r\n                                        Have an account?\r\n                                        <span\r\n                                            onClick={() => {\r\n                                                navigate(\"/login\");\r\n                                            }}\r\n                                            style={{\r\n                                                color: \"rgba(0, 186, 242, 1)\",\r\n                                                cursor: \"pointer\",\r\n                                            }}\r\n                                        >\r\n                                            &nbsp;Log In\r\n                                        </span>\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </Page>\r\n    );\r\n}\r\n\r\nexport default ResetPin;\r\n"],"names":["styles","otpFormControl","color","width","height","marginRight","border","borderRadius","props","isLoading","setIsLoading","useState","navigate","useNavigate","auth","useContext","AuthContext","formInitialSchema","localStorage","getItem","otp","email","reSendOTPHandle","async","url","ApiConfig","setPin","res","axios","post","status","toast","success","data","message","setEndTime","moment","add","unix","error","_error$response2","_error$response2$data","response","_jsx","Page","title","children","_jsxs","Box","sx","display","gap","textAlign","Typography","variant","mt","Formik","onSubmit","setPinChange","sendData","values","state","token","removeItem","setItem","_error$response","_error$response$data","initialValues","validationSchema","yup","shape","length","required","_ref","_auth$timeLeft","_auth$timeLeft2","_auth$timeLeft3","_auth$timeLeft3$minut","_auth$timeLeft4","_auth$timeLeft4$secon","errors","handleBlur","handleChange","handleSubmit","touched","setFieldValue","Form","Grid","margin","TextField","disabled","placeholder","type","fullWidth","size","inputProps","maxLength","value","name","Boolean","onBlur","onChange","SX","padding","FormHelperText","marginBottom","FormControl","pin","OTPInput","inputVariant","autoComplete","otpValue","id","style","justifyContent","OTPLength","otpType","marginTop","Button","ButtonCircularProgress","timeLeft","minutes","seconds","fontSize","fontStyle","fontWeight","lineHeight","toString","padStart","cursor","onClick"],"sourceRoot":""}