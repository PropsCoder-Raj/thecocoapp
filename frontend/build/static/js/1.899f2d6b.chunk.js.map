{"version":3,"file":"static/js/1.899f2d6b.chunk.js","mappings":"sHAIA,MAMA,EAJkB,CAEhBA,MAJU,U,gLCqHZ,QA1GA,SAAgBC,GACd,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,IAC1CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAErCG,EAAoBL,EACtB,CACEM,MAAO,IAET,CACEA,MAAOC,OAAOC,eAAeC,QAAQ,UAAY,IAoBvD,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,MAAM,QAAOC,UACjBC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,IAAK,MAAOC,UAAW,UAAWN,SAAA,EAC5DH,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIR,SAAC,WACzBC,EAAAA,EAAAA,MAACM,EAAAA,EAAU,CAACC,QAAQ,KAAIR,SAAA,CAAC,kCAEvBH,EAAAA,EAAAA,KAAA,SAAM,0BAERA,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACLC,SA1BiBC,UACvBpB,GAAa,GACb,WACoBqB,EAAAA,EAAMC,KAAKC,EAAAA,EAAU7B,MAAO,CAC5CQ,MAAOsB,EAAOtB,MACduB,SAAUD,EAAOC,YAGXC,MAGV,CAAE,MAAOC,GACPC,QAAQC,IAAI,QAASF,EAAMG,UAC3B9B,GAAa,EACf,GAaM+B,cAAe9B,EACf+B,iBAAkBC,EAAAA,KAAaC,MAAM,CACnChC,MAAO+B,EAAAA,KAAaE,SAAS,sCAC5B1B,SAEF2B,IAAA,IAAC,OACAC,EAAM,WACNC,EAAU,aACVC,EAAY,aACZC,EAAY,QACZC,EAAO,OACPjB,GACDY,EAAA,OACC1B,EAAAA,EAAAA,MAACgC,EAAAA,GAAI,CAACvB,SAAUqB,EAAa/B,SAAA,EAC3BC,EAAAA,EAAAA,MAACiC,EAAAA,GAAI,CAAAlC,SAAA,EACHH,EAAAA,EAAAA,KAACsC,EAAAA,EAAS,CACRC,YAAY,gCACZC,KAAK,QACL7B,QAAQ,WACR8B,WAAS,EACTC,KAAK,QACLC,WAAY,CAAEC,UAAW,KACzBC,MAAO3B,EAAOtB,MACdkD,KAAK,QACLzB,MAAO0B,QAAQZ,EAAQvC,OAASmC,EAAOnC,OACvCoD,OAAQhB,EACRiB,SAAUhB,KAEZjC,EAAAA,EAAAA,KAACkD,EAAAA,EAAc,CAAC7B,OAAK,EAAAlB,SAClBgC,EAAQvC,OAASmC,EAAOnC,YAI7BQ,EAAAA,EAAAA,MAACiC,EAAAA,GAAI,CAAAlC,SAAA,EACHH,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAAC8C,GAAI,EAAEhD,UACTH,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CACLZ,KAAK,SACL7B,QAAQ,YACR0C,SAAU5D,EACVgD,WAAS,EACTa,MAAO,CAAEC,SAAU,SAAUpD,SAC9B,aAKHH,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTiD,eAAgB,SAChBL,GAAI,GACJhD,UAEFC,EAAAA,EAAAA,MAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQ8C,MAAM,UAAStD,SAAA,CAAC,+BAE1CH,EAAAA,EAAAA,KAAA,QAAM0D,QAASA,OAASvD,SAAC,0BAI1B,QAMnB,C","sources":["config/APICongig.js","views/auth/signUp/SignUp.js"],"sourcesContent":["\r\n//Live URL\r\n// const url = \"https://\";\r\n//Local URL\r\nconst url = \"http://\";\r\n\r\nconst ApiConfig = {\r\n  //auth\r\n  login: url,\r\n};\r\nexport default ApiConfig;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormHelperText,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Page from \"src/component/Page\";\r\nimport ApiConfig from \"src/config/APICongig\";\r\nimport axios from \"axios\";\r\n\r\nfunction SignUp(props) {\r\n  const [isRememberMe, setIsRememberMe] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const formInitialSchema = isRememberMe\r\n    ? {\r\n        email: \"\",\r\n      }\r\n    : {\r\n        email: window.sessionStorage.getItem(\"email\") || \"\",\r\n      };\r\n\r\n  const handleFormSubmit = async (values) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await axios.post(ApiConfig.login, {\r\n        email: values.email,\r\n        password: values.password,\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        // Handle successful login\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ERROR\", error.response);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Login\">\r\n      <Box sx={{ display: \"grid\", gap: \"5px\", textAlign: \"center\" }}>\r\n        <Typography variant=\"h1\">Login</Typography>\r\n        <Typography variant=\"h5\">\r\n          Welcome back! Login now to see\r\n          <br /> where you left off\r\n        </Typography>\r\n        <Formik\r\n          onSubmit={handleFormSubmit}\r\n          initialValues={formInitialSchema}\r\n          validationSchema={yup.object().shape({\r\n            email: yup.string().required(\"Please enter your email address.\"),\r\n          })}\r\n        >\r\n          {({\r\n            errors,\r\n            handleBlur,\r\n            handleChange,\r\n            handleSubmit,\r\n            touched,\r\n            values,\r\n          }) => (\r\n            <Form onSubmit={handleSubmit}>\r\n              <Grid>\r\n                <TextField\r\n                  placeholder=\"Please enter an email address\"\r\n                  type=\"email\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  inputProps={{ maxLength: 256 }}\r\n                  value={values.email}\r\n                  name=\"email\"\r\n                  error={Boolean(touched.email && errors.email)}\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                />\r\n                <FormHelperText error>\r\n                  {touched.email && errors.email}\r\n                </FormHelperText>\r\n              </Grid>\r\n\r\n              <Grid>\r\n                <Box mt={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    disabled={isLoading}\r\n                    fullWidth\r\n                    style={{ maxWidth: \"370px\" }}\r\n                  >\r\n                    Login\r\n                    {/* {isLoading && <ButtonCircularProgress />} */}\r\n                  </Button>\r\n                </Box>\r\n                <Box\r\n                  sx={{\r\n                    display: \"grid\",\r\n                    justifyContent: \"center\",\r\n                    mt: 1,\r\n                  }}\r\n                >\r\n                  <Typography variant=\"body1\" color=\"primary\">\r\n                    Donâ€™t have an account?\r\n                    <span onClick={() => {}}>&nbsp;Sign up</span>\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n"],"names":["login","props","isRememberMe","setIsRememberMe","useState","isLoading","setIsLoading","formInitialSchema","email","window","sessionStorage","getItem","_jsx","Page","title","children","_jsxs","Box","sx","display","gap","textAlign","Typography","variant","Formik","onSubmit","async","axios","post","ApiConfig","values","password","status","error","console","log","response","initialValues","validationSchema","yup","shape","required","_ref","errors","handleBlur","handleChange","handleSubmit","touched","Form","Grid","TextField","placeholder","type","fullWidth","size","inputProps","maxLength","value","name","Boolean","onBlur","onChange","FormHelperText","mt","Button","disabled","style","maxWidth","justifyContent","color","onClick"],"sourceRoot":""}